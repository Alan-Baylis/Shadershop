Architecture
  Move "builtIn" into its own file.
  Move "combiners" into their own thing. Think of better name.


Misc
  Figure out how React context works
  Do something better than util.safeInv
  Tune mousewheel zooming
  Delete key
  Undo
  Duplicate
  Check that you don't create dependency loops
  Need to listen for scroll events on Scrollers and refresh





Plot
  Plot wants to be configurable: at least which axes correspond to which coordinates in domain/range





Outline Stuff
  Break out "Inspector"
  Create definition button / right click item - create by abstracting
  Thumbnails
  Show transform numbers when they're not identity?


Inspector
  Highlight transform numbers when hovering the control point
  Show transform numbers next to control point
  Scrub transform numbers in inspector?


Palette
  Insert button
  Anything can be dragged into the outline to put it in a specific place
  Maybe
    + insert buttons in outline like before
    select multiple and then click "add", "multiply", etc. to group those






Get Grid and canvas.getSpacing using better Plot API
Test with color map







Plot
  toWorld: (width, height, {x, y}) -> {domain, range}
    e.g.
      {domain: [3,null,null,null], range: [4,null,null,null]} or
      {domain: [2,5,null,null], range: [null,null,null,null]}
  toPixel: (width, height, {domain, range}) -> {x, y}

  getDimensions: -> [{space, coord}]
    e.g.
      [{space: "domain", coord: 0}, {space: "range", coord: 0}] or
      [{space: "domain", coord: 0}, {space: "domain", coord: 1}]


  Actions
    panPlot  = (plot, from, to)
    zoomPlot = (plot, zoomCenter, scaleFactor)


  For control points
    Translate:
      get:
        get domainTranslate and rangeTranslate as a single {domain, range} object
        Plot.toPixel that, put the control point at that place
      set:
        Plot.toWorld {x,y} (e.g. {domain: [5,null,null,null], range: [6,null,null,null]})
        overwrite non-null part of domainTranslate and rangeTranslate

    Make a transform control point for each dimension in the plot, for each
      get:
        get translate {domain, range} object
        get transform for that dimension (e.g. [1,0,0,0])
        add that to the translate object (using space: "domain" | "range")
        Plot.toPixel that, put the control point at that place
      set:
        Plot.toWorld {x,y} (e.g. {domain: [5,null,null,null], range: [6,null,null,null]})
        take just the space part of that
        subtract the space part of the translate {domain, range} object
        overwrite non-null part of transform




TODO
  try to get rid of all getBounds calls in MainPlotView





